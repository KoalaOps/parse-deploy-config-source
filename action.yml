name: 'Parse Deploy Config Source'
description: 'Parse deployment configuration source string into repo, ref, and path components'
author: 'KoalaOps'

branding:
  icon: 'git-branch'
  color: 'purple'

inputs:
  source:
    description: |
      Deployment config source in format: [<repo>][@<ref>][:<path>]
      All parts are optional and can be omitted:
      - repo: "self" for current repo, or "owner/repo" (defaults to "self")
      - @ref: branch/tag (defaults to current ref for self, default branch for others)
      - :path: path to service/app directory (defaults to ".")

      The action expects deployment configs to be in <path>/deploy/overlays/<env>

      Examples:
        ""                                    # self, current ref, path="."
        self                                  # self, current ref, path="."
        @main                                 # self, main branch, path="."
        :services/api                         # self, current ref, path="services/api"
        @main:services/api                    # self, main branch, path="services/api"
        self:services/api                     # self, current ref, path="services/api"
        Acme/deployments                      # external repo, default branch, path="."
        Acme/deployments@main:services/api    # external repo, main branch, path="services/api"
    required: true
  environment:
    description: 'The deployment environment (e.g., dev, staging, prod)'
    required: false

outputs:
  repository:
    description: 'The parsed repository (owner/repo format)'
    value: ${{ steps.parse.outputs.repository }}
  ref:
    description: 'The parsed git ref (branch or tag)'
    value: ${{ steps.parse.outputs.ref }}
  path:
    description: 'The parsed path to service/app deployment directory'
    value: ${{ steps.parse.outputs.path }}
  is_self:
    description: 'Whether this is the current repository (true/false)'
    value: ${{ steps.parse.outputs.is_self }}
  overlay_dir:
    description: 'The full path to the overlay directory for the environment (only set if environment input is provided)'
    value: ${{ steps.parse.outputs.overlay_dir }}
  is_separate_deploy_repo:
    description: 'Whether the deployment repo is different from the current repository (true/false)'
    value: ${{ steps.parse.outputs.is_separate_deploy_repo }}

runs:
  using: 'composite'
  steps:
    - name: Parse deploy config source
      id: parse
      shell: bash
      run: |
        SOURCE="${{ inputs.source }}"
        CURRENT_REPO="${{ github.repository }}"
        CURRENT_REF="${{ github.ref }}"
        
        # Parse format: [<repo>][@<ref>][:<path>]
        # Handle special cases first
        if [ -z "$SOURCE" ] || [ "$SOURCE" = ":" ] || [ "$SOURCE" = "@" ]; then
          # Empty or invalid minimal cases - use all defaults
          REPO="self"
          REF=""
          CONFIG_PATH=""
        elif [[ "$SOURCE" =~ ^:(.+)$ ]]; then
          # Just path (e.g., ":services/api")
          REPO="self"
          REF=""
          CONFIG_PATH="${BASH_REMATCH[1]}"
        elif [[ "$SOURCE" =~ ^@([^:]+)(:.+)?$ ]]; then
          # Just ref and optional path (e.g., "@main" or "@main:services/api")
          REPO="self"
          REF="${BASH_REMATCH[1]}"
          CONFIG_PATH="${BASH_REMATCH[2]#:}"  # Remove : prefix
        elif [[ "$SOURCE" =~ ^([^@:]+)(@[^:]+)?(:.+)?$ ]]; then
          # Standard format with repo
          REPO="${BASH_REMATCH[1]}"
          REF="${BASH_REMATCH[2]#@}"   # Remove @ prefix
          CONFIG_PATH="${BASH_REMATCH[3]#:}"  # Remove : prefix
        else
          echo "::error::Invalid source format. Expected '[<repo>][@<ref>][:<path>]'"
          echo "::error::Examples: 'self', '@main', ':services/api', 'Acme/deployments@main:platform/payments'"
          exit 1
        fi
        
        # Handle 'self' keyword
        IS_SELF="false"
        if [ "$REPO" = "self" ]; then
          REPO="$CURRENT_REPO"
          IS_SELF="true"
        elif [ "$REPO" = "$CURRENT_REPO" ]; then
          IS_SELF="true"
        fi
        
        # Validate repository format
        if ! [[ "$REPO" =~ ^[^/]+/[^/]+$ ]]; then
          echo "::error::Invalid repository format. Expected 'owner/repo', got: '$REPO'"
          exit 1
        fi
        
        # Apply defaults
        if [ -z "$REF" ]; then
          if [ "$IS_SELF" = "true" ]; then
            REF="$CURRENT_REF"
          fi
          # For external repos, leave empty to use default branch
        fi
        
        if [ -z "$CONFIG_PATH" ]; then
          CONFIG_PATH="."
        fi
        
        # Clean up path
        CONFIG_PATH="${CONFIG_PATH#/}"              # Remove leading slash
        CONFIG_PATH="${CONFIG_PATH%/}"              # Remove trailing slash
        CONFIG_PATH=$(echo "$CONFIG_PATH" | sed 's|/\+|/|g')  # Remove duplicate slashes
        
        # Calculate overlay directory if environment is provided
        ENVIRONMENT="${{ inputs.environment }}"
        if [ -n "$ENVIRONMENT" ]; then
          if [ "$CONFIG_PATH" = "." ]; then
            OVERLAY_DIR="deploy/overlays/$ENVIRONMENT"
          else
            OVERLAY_DIR="$CONFIG_PATH/deploy/overlays/$ENVIRONMENT"
          fi
          echo "overlay_dir=$OVERLAY_DIR" >> $GITHUB_OUTPUT
        fi

        # Determine if this is a separate deploy repo
        IS_SEPARATE_DEPLOY_REPO="false"
        if [ "$REPO" != "$CURRENT_REPO" ]; then
          IS_SEPARATE_DEPLOY_REPO="true"
        fi

        # Set outputs
        echo "repository=$REPO" >> $GITHUB_OUTPUT
        echo "ref=$REF" >> $GITHUB_OUTPUT
        echo "path=$CONFIG_PATH" >> $GITHUB_OUTPUT
        echo "is_self=$IS_SELF" >> $GITHUB_OUTPUT
        echo "is_separate_deploy_repo=$IS_SEPARATE_DEPLOY_REPO" >> $GITHUB_OUTPUT

        if [ -n "$ENVIRONMENT" ]; then
          echo "::notice::Parsed: repo='$REPO', ref='${REF:-<default>}', path='$CONFIG_PATH', overlay='$OVERLAY_DIR'"
        else
          echo "::notice::Parsed: repo='$REPO', ref='${REF:-<default>}', path='$CONFIG_PATH'"
        fi